variables:
  REGISTRY_BASE: registry.gitlab.com/baixingwang/devops-user-service
  IMAGE_REF: $REGISTRY_BASE:$CI_PIPELINE_ID

stages:
  - compile
  - check
  - package
  - build
  - deploy
  - test
  - release
  - clean

compile:
  stage: compile
  image: maven:3.6.3-adoptopenjdk-11
  script:
    - export MAVEN_OPTS=-Dmaven.repo.local=$PWD/.m2/repository
    - mvn -U compile
  only:
    - /^feature-.*/
    - master
    - release
  cache:
    paths:
      - .m2

uni-test:
  stage: check
  image: maven:3.6.3-adoptopenjdk-11
  script:
    - export MAVEN_OPTS=-Dmaven.repo.local=$PWD/.m2/repository
    - mvn clean test && cat target/jacoco/index.html
  only:
    - /^feature-.*/
    - master
    - release
  cache:
    paths:
      - .m2

sonar:
  image: maven:3.6.3-adoptopenjdk-11
  stage: check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    paths:
      - .sonar/cache
      - .m2
  script:
    - export MAVEN_OPTS=-Dmaven.repo.local=$PWD/.m2/repository
    - mvn sonar:sonar
      -Dmaven.test.skip=true
      -Dsonar.host.url=http://39.100.144.36
      -Dsonar.projectKey=devops-user-service
      -Dsonar.dynamicAnalysis=reuseReports
      -Dsonar.jacoco.reportMissing.force.zero=true
      -Dsonar.jacoco.reportPaths=$PWD/devops-user-service/coverage-reports/jacoco.exec
  allow_failure: true
  only:
    - /^feature-.*/
    - master
    - release

maven package:
  stage: package
  dependencies:
    - compile
  image: maven:3.6.3-adoptopenjdk-11
  script:
    - export MAVEN_OPTS=-Dmaven.repo.local=$PWD/.m2/repository
    - mvn -U package -Dmaven.test.skip=true
  only:
    - /^feature-.*/
    - master
    - release
  artifacts:
    paths:
      - target/app.jar
    expire_in: 12h
  cache:
    paths:
      - .m2

docker build:
  stage: build
  image: docker
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $IMAGE_REF .
    - docker push $IMAGE_REF
    - docker rmi $IMAGE_REF
  only:
    - /^feature-.*/
    - master
    - release
  tags:
    - baixingwang

deploy to dev:
  stage: deploy
  image:
    name: bitnami/kubectl:1.14
    entrypoint: [""]
  script:
    - kubectl set image deployment/dev-devops-user-service devops-user-service=$IMAGE_REF
  only:
    - /^feature-.*/
  environment:
    name: dev
    url: http://dev-devops.baixing.cn:8088

smoke test:
  stage: test
  only:
    - /^feature-.*/
  dependencies:
    - deploy to dev
  script:
    - testResult=$(curl -s "${api_host}id=${api_devcase_id}&token=${api_token}&mode=json")
    - echo ${testResult} ;
    - if [[ ${testResult} =~ "全部验证通过" ]]; then  exit 0 ; else exit 1;  fi

deploy to test:
  stage: deploy
  image:
    name: bitnami/kubectl:1.14
    entrypoint: [""]
  script: 
    - kubectl set image deployment/test-devops-user-service devops-user-service=$IMAGE_REF
  only:
    - release
  environment:
    name: test
    url: http://test-devops.baixing.cn:8088

integrate test:
  stage: test
  only:
    - release
  dependencies:
    - deploy to test
  script:
    - testResult=$(curl -s "${api_host}id=${api_testcase_id}&token=${api_token}&mode=json")
    - echo ${testResult} ;
    - if [[ ${testResult} =~ "全部验证通过" ]]; then  exit 0 ; else exit 1;  fi

stress test:
  stage: test
  only:
    - release
  dependencies:
    - deploy to test
  script:
    - 'stressTrigger=$(curl -s -X POST --header "Content-Type: application/json" --header "token: $pt_token" --header "Accept: */*" -d "[$pt_case_id]"   "$pt_host/runOnce" )'
    - echo ${stressTrigger}
    - if [[ ${stressTrigger} =~ "压测开始" ]]; then  echo "性能测试触发成功" ; else exit 1;  fi
    - sleep 10
    - 'testResult=$(curl -s -X POST --header "Content-Type: application/json" --header "token: $pt_token" --header "Accept: */*" -d "[$pt_case_id]"   "$pt_host/statInfo/$pt_case_id?_=1602594288128")'
    - echo ${testResult} ;
    - if [[ ${testResult} =~ "\"SuccessPercent\":\"1.00\"" ]]; then  echo "性能测试通过" ; else echo "性能测试未通过";  exit 1;  fi


deploy to stg:
  stage: deploy
  image:
    name: bitnami/kubectl:1.14
    entrypoint: [""]
  script:
    - kubectl set image deployment/stg-devops-user-service devops-user-service=$IMAGE_REF
  only:
    - master
  environment:
    name: stg
    url: http://stg-devops.baixing.cn:8088

online test:
  stage: test
  only:
    - master
  dependencies:
    - deploy to stg
  script:
    - testResult=$(curl -s "${api_host}id=${api_stagcase_id}&token=${api_token}&mode=json")
    - echo ${testResult} ;
    - if [[ ${testResult} =~ "全部验证通过" ]]; then  exit 0 ; else exit 1;  fi
  
deploy to prod:
  stage: release
  image:
    name: smartive/kustomize:kustomize-v3.8.1_kubectl-v1.18.6
    entrypoint: [""]
  before_script:
    - git remote set-url origin https://baixingwang:$CI_PASSWORD@gitlab.com/baixingwang/devops-cd.git
    - git config --global user.name "baixingwang"
    - git config --global user.email "baixingwang@baixing.com"
  script:
    - git clone https://baixingwang:$CI_PASSWORD@gitlab.com/baixingwang/devops-cd.git /opt/devops-cd
    - cd /opt/devops-cd
    - git pull
    - cd /opt/devops-cd/devops-user-service
    - kustomize edit set image $IMAGE_REF
    - git commit -am 'image update'
    - git push origin master
  only:
    - master
  environment:
    name: prod
    url: http://prod-devops.baixing.cn:8088/

clean:
  stage: clean
  image:
    name: bitnami/kubectl:1.14
    entrypoint: [""]
  script:
    - echo "清理环境..."
  only:
    - master
  
tag branch:
  stage: clean
  only: 
    - master
  script:
    - git config --global user.name "baixingwang"
    - git config --global user.email "baixingwang@baixing.com"
    - git remote set-url origin https://baixingwang:$CI_PASSWORD@gitlab.com/baixingwang/devops-user-service.git
    - git tag -a "Release_$(date +%Y%m%d%H%M)" -m "Auto-Release"
    - git push origin "Release_$(date +%Y%m%d%H%M)"
